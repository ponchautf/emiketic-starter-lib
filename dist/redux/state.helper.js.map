{"version":3,"sources":["../../src/redux/state.helper.js"],"names":["createSimpleOperation","module","name","action","operation","ACTION","config","MODULE","NAME","OPERATION","payload","type","Object","assign","createAsyncOperation","REQUEST","SUCCESS","FAILURE","request","input","success","output","dispatch","failure","error"],"mappings":";;;;;;;;;;;;AAAA;;;;;;;;;AASA;;;;;;;;;;;;;AAaA;;;;;;;;;AAUO,SAASA,qBAAT,CAA+BC,MAA/B,EAAuCC,IAAvC,EAA4D;AAAA,MAAfC,MAAe,uEAAN,IAAM;AACjE,MAAMC,SAAS,aAAMH,MAAN,cAAgBC,IAAhB,CAAf;AAEA,MAAMG,MAAM,aAAMD,SAAN,YAAZ;AAEA,MAAME,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAEN,MADK;AAEbO,IAAAA,IAAI,EAAEN,IAFO;AAGbO,IAAAA,SAAS,EAAEL,SAHE;AAKbC,IAAAA,MAAM,EAANA,MALa;AAMbF,IAAAA,MANa,oBAMQ;AAAA,UAAdO,OAAc,uEAAJ,EAAI;AACnB;AACEC,QAAAA,IAAI,EAAEN;AADR,SAEKK,OAFL;AAID;AAXY,GAAf;;AAcA,MAAIP,MAAJ,EAAY;AACVS,IAAAA,MAAM,CAACC,MAAP,CAAcV,MAAd,EAAsBG,MAAtB;AACAH,IAAAA,MAAM,CAACG,MAAP,GAAgBA,MAAhB;AACA,WAAOH,MAAP;AACD;;AAED,SAAOG,MAAP;AACD;AAED;;;;;;;;;;;AAUO,SAASQ,oBAAT,CAA8Bb,MAA9B,EAAsCC,IAAtC,EAA2D;AAAA,MAAfC,MAAe,uEAAN,IAAM;AAChE,MAAMC,SAAS,aAAMH,MAAN,cAAgBC,IAAhB,CAAf;AAEA,MAAMa,OAAO,aAAMX,SAAN,aAAb;AACA,MAAMY,OAAO,aAAMZ,SAAN,aAAb;AACA,MAAMa,OAAO,aAAMb,SAAN,aAAb;AAEA,MAAME,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAEN,MADK;AAEbO,IAAAA,IAAI,EAAEN,IAFO;AAGbO,IAAAA,SAAS,EAAEL,SAHE;AAKbW,IAAAA,OAAO,EAAPA,OALa;AAMbG,IAAAA,OANa,qBAMO;AAAA,UAAZC,KAAY,uEAAJ,EAAI;AAClB;AACER,QAAAA,IAAI,EAAEI;AADR,SAEKI,KAFL;AAID,KAXY;AAabH,IAAAA,OAAO,EAAPA,OAba;AAcbI,IAAAA,OAda,qBAcQ;AAAA,UAAbC,MAAa,uEAAJ,EAAI;AACnB,aAAO,UAACC,QAAD,EAAc;AACnBA,QAAAA,QAAQ;AACNX,UAAAA,IAAI,EAAEK;AADA,WAEHK,MAFG,EAAR;AAKA,eAAOA,MAAP;AACD,OAPD;AAQD,KAvBY;AAyBbJ,IAAAA,OAAO,EAAPA,OAzBa;AA0BbM,IAAAA,OA1Ba,mBA0BLC,KA1BK,EA0BE;AACb,aAAO,UAACF,QAAD,EAAc;AACnBA,QAAAA,QAAQ,CAAC;AACPX,UAAAA,IAAI,EAAEM;AADC,SAAD,CAAR;AAIA,cAAMO,KAAN;AACD,OAND;AAOD;AAlCY,GAAf;;AAqCA,MAAIrB,MAAJ,EAAY;AACVS,IAAAA,MAAM,CAACC,MAAP,CAAcV,MAAd,EAAsBG,MAAtB;AACAH,IAAAA,MAAM,CAACG,MAAP,GAAgBA,MAAhB;AACA,WAAOH,MAAP;AACD;;AAED,SAAOG,MAAP;AACD","sourcesContent":["/**\n * @typedef {Object<Function>} SimpleOperationFunction\n * @prop {string} MODULE\n * @prop {string} NAME\n * @prop {string} OPERATION\n * @prop {string} ACTION\n * @prop {function} action\n */\n\n/**\n * @typedef {Object} AsyncOperationFunction\n * @prop {string} MODULE\n * @prop {string} NAME\n * @prop {string} OPERATION\n * @prop {string} REQUEST\n * @prop {function} request\n * @prop {string} SUCCESS\n * @prop {function} success\n * @prop {string} FAILURE\n * @prop {function} failure\n */\n\n/**\n * Action creator factory for simple operation\n *\n * @template T\n * @param {string} module\n * @param {string} name\n * @param {T} action\n * @returns {T&SimpleOperationFunction} input action augmented by helpers\n */\n\nexport function createSimpleOperation(module, name, action = null) {\n  const operation = `${module}.${name}`;\n\n  const ACTION = `${operation}.ACTION`;\n\n  const config = {\n    MODULE: module,\n    NAME: name,\n    OPERATION: operation,\n\n    ACTION,\n    action(payload = {}) {\n      return {\n        type: ACTION,\n        ...payload,\n      };\n    },\n  };\n\n  if (action) {\n    Object.assign(action, config);\n    action.config = config;\n    return action;\n  }\n\n  return config;\n}\n\n/**\n * Action creators factory for typical async operation\n *\n * @template T\n * @param {string} module\n * @param {string} name\n * @param {T} action\n * @returns {T&AsyncOperationFunction} input action augmented by helpers\n */\n\nexport function createAsyncOperation(module, name, action = null) {\n  const operation = `${module}.${name}`;\n\n  const REQUEST = `${operation}.REQUEST`;\n  const SUCCESS = `${operation}.SUCCESS`;\n  const FAILURE = `${operation}.FAILURE`;\n\n  const config = {\n    MODULE: module,\n    NAME: name,\n    OPERATION: operation,\n\n    REQUEST,\n    request(input = {}) {\n      return {\n        type: REQUEST,\n        ...input,\n      };\n    },\n\n    SUCCESS,\n    success(output = {}) {\n      return (dispatch) => {\n        dispatch({\n          type: SUCCESS,\n          ...output,\n        });\n\n        return output;\n      };\n    },\n\n    FAILURE,\n    failure(error) {\n      return (dispatch) => {\n        dispatch({\n          type: FAILURE,\n        });\n\n        throw error;\n      };\n    },\n  };\n\n  if (action) {\n    Object.assign(action, config);\n    action.config = config;\n    return action;\n  }\n\n  return config;\n}\n"],"file":"state.helper.js"}